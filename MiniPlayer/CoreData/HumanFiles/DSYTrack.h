#import "_DSYTrack.h"
@class DSYRTMPObject;

/**
 The DSYTrack, a subclass of the _DSYTrack (a private NSManagedObject subclass generated by Mogenerator using the Model.xcdatamodeld - See the 'Run Mogenerator' target), provides a Core Data class that represents a track from the Beats Music API. This class contains class methods to directly import the JSON parsed NSDictionary and NSArray representations of a track directly from the API.
 */
@interface DSYTrack : _DSYTrack

#pragma mark - Properties
///-----------------------------------------------------------
/// @name Properties
///-----------------------------------------------------------

/**
 A BOOL indicating whether this is a group type of DSYTrack. You can manually set this to YES if you'd like to create a DSYTrack to serve as a group cell in an NSTableView.
 */
@property (nonatomic,assign) BOOL isGroup;

#pragma mark - Class Initializers
///-----------------------------------------------------------
/// @name Class Initializers
///-----------------------------------------------------------

/**
 Creates a DSYTrack using an NSDictionary representation of the track. Will try to parse the dictionary for keys = artist_display_name, disc_number, duration, edited_version, id, parental_advisory, popularity, release_date, streamable, title, track_position, and type. This method will first load the DSYTrack if it already exists in the Core Data store and will only update the key-value information if a local track with the same id is present.
 @param dictionary An NSDictionary with the following keys: keys = artist_display_name, disc_number, duration, edited_version, id, parental_advisory, popularity, release_date, streamable, title, track_position, and type.
 @return A DSYTrack created using the input NSDictionary.
 */
+(DSYTrack *)trackWithDictionary:(NSDictionary *)dictionary;

/**
 Creates an NSArray of DSYTrack objects using an NSArray containing NSDictionary objects. For each NSDictionary this will try to parse for keys = artist_display_name, disc_number, duration, edited_version, id, parental_advisory, popularity, release_date, streamable, title, track_position, and type. For each track, this method will first load the DSYTrack if it already exists in the Core Data store and will only update the key-value information if a local track with the same id is present.
 @param dictionaries An NSArray containing the NSDictionary objects, each containing the keys: artist_display_name, disc_number, duration, edited_version, id, parental_advisory, popularity, release_date, streamable, title, track_position, and type.
 @return An NSArray of DSYTrack objects created using the input NSArray of NSDictionary objects.
 */
+(NSArray *)tracksWithDictionaries:(NSArray *)dictionaries;

#pragma mark - Getting Stream Info
///-----------------------------------------------------------
/// @name Getting Stream Info
///-----------------------------------------------------------

/**
 Pulls the RTMP stream information.
 @param completionBlock Triggered when the stream info has been found. The completionBlock contains two parameters, the first parameter being a DSYRTMPObject that represents the RTMP stream information as an object while the second parameter is an NSError incase anything goes wrong. If an error is present then the rtmpStreamInfo parameter will be nil and, similarily, if there is no error then the error parameter will be nil and the rtmpStreamInfo will contain the RTMP stream information.
 */
-(void)getRTMPStreamWithCompletion:(void(^)(DSYRTMPObject *rtmpStreamInfo, NSError *error))completionBlock;

@end
